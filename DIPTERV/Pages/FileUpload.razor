@page "/fileupload"
@using DIPTERV.Context;
@using DIPTERV.Data
@using DIPTERV.Services;
@using Microsoft.EntityFrameworkCore

<RadzenNotification />

@inject GeneticAlgorithmService gaService
@inject NotificationService notificationService

<PageTitle>File Upload</PageTitle>

<RadzenCard Style="margin: 10px; text-align: center; width: 330px">
    Tantárgyfelosztás feltöltése
    <InputFile OnChange="@UploadFileAsync" style="margin: 10px; margin-left: 10px; margin-right: 10px; margin-bottom: 10px; margin-top: 20px" />
</RadzenCard>
<RadzenCard Style="margin: 10px; display: inline-block; text-align: center">
    Órarend készítése
    <RadzenButton Variant="Variant.Flat" Click=@(args => AlgStartAsync()) Text="Algoritmus indítása" ButtonStyle="ButtonStyle.Primary" Style="display: block; margin: 10px; margin-top: 20px" />
</RadzenCard>
            

@code {
    bool importSuccess;
    bool runGASuccess;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private async void UploadFileAsync(InputFileChangeEventArgs e)
    {
        importSuccess = await gaService.ImportExcelFileAsync(e);
        if (importSuccess)
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sikeres importálás", Detail = "A tantárgyfelosztás mentésre került", Duration = 4000 });
        else
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Sikertelen importálás", Detail = "A tantárgyfelosztás nem lett elmentve.", Duration = 4000 });
    }
    private async void AlgStartAsync()
    {
        runGASuccess = await gaService.RunGAAsync();
        if (runGASuccess)
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sikeres futtatás", Detail = "Az órarend elkészült", Duration = 4000 });
        else
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Sikertelen futtatás", Detail = "Az órarend elkészítése sikertelen", Duration = 4000 });

    }
    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

        events.Add(DateTime.Now, $"{message.Severity} notification");
        await InvokeAsync(() => { StateHasChanged(); });
    }

  
}
